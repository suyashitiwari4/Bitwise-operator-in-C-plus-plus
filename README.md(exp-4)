# Bitwise-operator-in-C-plus-plus
EXP-4
AIM: to study about bitwise operator.
APPARATUS:Online C++ compiler.
THEORY:
     & =	Binary AND Operator copies a bit to the result if it exists in both operands.
    |	=Binary OR Operator copies a bit if it exists in either operand.	
    ^ =	Binary XOR Operator copies the bit if it is set in one operand but not both.	
    ~ =	Binary Ones Complement Operator is unary and has the effect of 'flipping' bits.	
    << = 	Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.
    >> = Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.	
  ALGORITHM:
Program 1 Objective: To perform and display results of various bitwise operations using two predefined integers.

Steps:

Start
Declare and initialize two integers:

a ← 4 b ← 2

perform bitwise operations:
bitwise_and ← a AND b (a & b)

bitwise_or ← a OR b (a | b)

bitwise_xor ← a XOR b (a ^ b)

bitwise_not ← NOT a (~a)

Perform shift operations:
leftshift ← a shifted left by 2 bits (a << 2)

rightshift ← 3 shifted right by a bits (3 >> a)

Display results:
Output all computed values to the console using cout

End


Program 2

Objective: To modify a predefined integer by setting and resetting specific bits as per user input.

Steps:

Start

Initialize integer i ← 76

Ask the user to enter the bit position to set

Read input into bit_to_be_set

Set the specified bit using bitwise OR:

set ← i | (1 << bit_to_be_set)

Ask user to enter the bit position to reset

Read input into reset

Reset the specified bit using bitwise AND with bitwise NOT:

reset ← i & ~(1 << reset)

Display the result after setting

Display the result after resetting

End

CONCLUSION:
       Hence we have learned about the bitwise operator in C++.
